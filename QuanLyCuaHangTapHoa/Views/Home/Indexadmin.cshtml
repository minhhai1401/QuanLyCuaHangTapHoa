@using QuanLyCuaHangTapHoa.Models;
@using PagedList;
@using PagedList.Mvc;

@{
    ViewBag.Title = "Bảng điều khiển";
    Layout = "~/Views/Shared/_layoutadmin.cshtml";
    quantaphoaEntities _db = new quantaphoaEntities();
    var dsKhachHang = _db.KhachHangs.ToList();
    var dsProduct = _db.Products.ToList();
    var dsOrder = _db.Orders.ToList();
    var lowStockCount = dsProduct.Count(p => p.SoLuong < 50);

    // Chuẩn bị dữ liệu cho biểu đồ
    var monthlyData = dsOrder
        .Where(o => o.NgayDat.HasValue)
        .GroupBy(o => o.NgayDat.Value.Month)
        .Select(g => new
        {
            Month = g.Key,
            TotalAmount = g.Sum(o => o.ThanhTien ?? 0),
            OrderCount = g.Count()
        })
        .OrderBy(x => x.Month)
        .ToList();
}
<!DOCTYPE html>
<html>
<head>
    <title>Bảng điều khiển</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
</head>
<body>
    <div class="dashboard-header">
        <div class="header-content">
            <div class="title-section">
                <i class="fas fa-chart-line"></i>
                <h2>Bảng điều khiển</h2>
            </div>
            <div class="info-section">
                <div class="date-info">
                    <i class="fas fa-calendar-alt"></i>
                    <span>@DateTime.Now.ToString("dd-MM-yyyy")</span>
                </div>
            </div>
        </div>
    </div>

    <div class="stats-grid">
        <!-- Khách hàng -->
        <div class="stat-box customer">
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-content">
                <h3>TỔNG KHÁCH HÀNG</h3>
                <p class="stat-value">@dsKhachHang.Count()</p>
                <p class="stat-desc">Tổng số khách hàng được quản lý.</p>
            </div>
        </div>

        <!-- Sản phẩm -->
        <div class="stat-box product">
            <div class="stat-icon">
                <i class="fas fa-boxes"></i>
            </div>
            <div class="stat-content">
                <h3>TỔNG SẢN PHẨM</h3>
                <p class="stat-value">@dsProduct.Count()</p>
                <p class="stat-desc">Tổng số sản phẩm được quản lý.</p>
            </div>
        </div>

        <!-- Đơn hàng -->
        <div class="stat-box order">
            <div class="stat-icon">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="stat-content">
                <h3>TỔNG ĐƠN HÀNG</h3>
                <p class="stat-value">@dsOrder.Count()</p>
                <p class="stat-desc">Tổng số hóa đơn bán hàng trong tháng.</p>
            </div>
        </div>

        <!-- Sắp hết hàng -->
        <div class="stat-box warning">
            <div class="stat-icon">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="stat-content">
                <h3>SẮP HẾT HÀNG</h3>
                <p class="stat-value">@lowStockCount</p>
                <p class="stat-desc">Số sản phẩm cảnh báo có số lượng dưới 50.</p>
            </div>
        </div>
    </div>

    <div class="charts-container">
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-title">Thống kê doanh số bán hàng</div>
                <div class="chart-options">
                    <select id="chartPeriod">
                        <option value="day">Theo ngày</option>
                        <option value="week">Theo tuần</option>
                        <option value="month" selected>Theo tháng</option>
                        <option value="year">Theo năm</option>
                    </select>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="chartProduct"></canvas>
            </div>
        </div>

        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-title">Phân tích xu hướng</div>
                <div class="chart-options">
                    <select id="trendMetric">
                        <option value="revenue">Doanh thu</option>
                        <option value="orders">Đơn hàng</option>
                        <option value="products">Sản phẩm</option>
                    </select>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="trendChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Top Selling Products Section -->
    <div class="top-products-container">
        <div class="top-products-card">
            <div class="top-products-header">
                <div class="top-products-title">
                    <i class="fas fa-award"></i>
                    <h3>Sản phẩm bán chạy</h3>
                </div>
                <div class="top-products-filter">
                    <select id="timeRangeFilter">
                        <option value="week">Tuần này</option>
                        <option value="month" selected>Tháng này</option>
                        <option value="year">Năm nay</option>
                    </select>
                </div>
            </div>

            <div class="table-responsive">
                <table class="top-products-table">
                    <thead>
                        <tr>
                            <th style="width: 60px;">#</th>
                            <th>Sản phẩm</th>
                            <th class="text-center">Danh mục</th>
                            <th class="text-center">Đã bán</th>
                            <th class="text-center">Còn lại</th>
                            <th class="text-right">Doanh thu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var topProducts = _db.Products
                                .OrderByDescending(p => p.ProductSold)
                                .Take(5)
                                .ToList();

                            double totalRevenue = 0;
                            for (int i = 0; i < topProducts.Count; i++)
                            {
                                var product = topProducts[i];
                                var productRevenue = product.ProductSold * product.UnitPrice ?? 0;
                                totalRevenue += productRevenue;

                                <tr>
                                    <td class="ranking">
                                        <div class="rank-badge rank-@(i+1)">@(i+1)</div>
                                    </td>
                                    <td>
                                        <div class="product-info">
                                            <img src="@product.FullPicturePath" class="product-thumbnail" alt="@product.ProductName">
                                            <div>
                                                <div class="product-name">@product.ProductName</div>
                                                <div class="product-price">@String.Format("{0:#,0}", product.UnitPrice) ₫</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <span class="category-tag">@(product.Catalog?.CatalogName ?? "Không có")</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="sold-count">@product.ProductSold</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="stock-count @(product.SoLuong <= 50 ? "low-stock-count" : "")">
                                            @product.SoLuong
                                        </span>
                                    </td>
                                    <td class="text-right revenue-amount">
                                        @String.Format("{0:#,0}", productRevenue) ₫
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="5" class="text-right"><strong>Tổng doanh thu:</strong></td>
                            <td class="text-right total-revenue">@String.Format("{0:#,0}", totalRevenue) ₫</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

    <!-- Recent Reviews Section -->
    <div class="reviews-container">
        <div class="reviews-card">
            <div class="reviews-header">
                <div class="reviews-title">
                    <i class="fas fa-comments"></i>
                    <h3>Đánh giá gần đây</h3>
                </div>
                <div class="reviews-filter">
                    <select id="reviewsFilter">
                        <option value="all" selected>Tất cả đánh giá</option>
                        <option value="new">Chưa xem</option>
                        <option value="high">Đánh giá cao (4-5 sao)</option>
                        <option value="low">Đánh giá thấp (1-3 sao)</option>
                    </select>
                </div>
            </div>

            <div class="reviews-list">
                @{
                    var recentReviews = _db.DanhGias
                        .Include("KhachHang")
                        .Include("Product")
                        .OrderByDescending(d => d.Ngaycapnhap)
                        .Take(5)
                        .ToList();

                    if (recentReviews.Count > 0)
                    {
                        foreach (var review in recentReviews)
                        {
                            var ratingClass = review.Rating >= 4 ? "high-rating" :
                                            review.Rating >= 3 ? "medium-rating" : "low-rating";

                            <div class="review-item">
                                <div class="review-header">
                                    <div class="reviewer-info">
                                        <div class="reviewer-avatar">
                                            @((!string.IsNullOrEmpty(review.KhachHang?.Picture)) ?
                                            review.KhachHang.Picture.Substring(0, 1).ToUpper() : "U")
                                        </div>
                                        <div class="reviewer-details">
                                            <div class="reviewer-name">@(review.KhachHang?.HoTen ?? "Người dùng ẩn danh")</div>
                                            <div class="review-date">
                                                @(review.Ngaycapnhap.HasValue ? review.Ngaycapnhap.Value.ToString("dd/MM/yyyy HH:mm") : "Không rõ")
                                            </div>
                                        </div>
                                    </div>
                                    <div class="review-rating @ratingClass">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Rating)
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                    </div>
                                </div>
                                <div class="review-product">
                                    <div class="product-badge">Sản phẩm:</div>
                                    <a href="@Url.Action("ChitietSP", "Product", new { id = review.id_sp })">
                                        @(review.Product?.ProductName ?? "Sản phẩm không xác định")
                                    </a>
                                </div>
                                <div class="review-content">@review.Content</div>
                                <div class="review-actions">
                                    <button class="btn-reply" data-review-id="@review.Id">
                                        <i class="fas fa-reply"></i> Phản hồi
                                    </button>
                                    <button class="btn-mark-read" data-review-id="@review.Id" title="Đánh dấu đã đọc">
                                        <i class="fas fa-check"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-reviews">
                            <i class="far fa-comment-dots"></i>
                            <p>Chưa có đánh giá nào gần đây</p>
                        </div>
                    }
                }
            </div>

            <div class="reviews-footer">
                <a href="@Url.Action("Index", "DanhGia")" class="view-all-link">
                    Xem tất cả đánh giá <i class="fas fa-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>

    <!-- Orders Table -->
    <div class="orders-container">
        <div class="orders-card">
            <div class="orders-header">
                <div class="orders-title">
                    <i class="fas fa-clipboard-list"></i>
                    <h3>Đơn hàng cần xử lý</h3>
                </div>
                <div class="orders-filter">
                    <select id="orderFilter">
                        <option value="all">Tất cả</option>
                        <option value="pending">Chưa giao hàng</option>
                        <option value="shipping">Đang giao hàng</option>
                    </select>
                </div>
            </div>

            <div class="table-responsive">
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th>Mã đơn</th>
                            <th>Khách hàng</th>
                            <th>Ngày đặt</th>
                            <th>Tổng tiền</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            // Lấy 4 đơn hàng mới nhất cần xử lý
                            var recentOrders = dsOrder
                                .Where(o => o.Status == "Chưa giao hàng" || o.Status == "Đang giao hàng")
                                .OrderByDescending(o => o.NgayDat) // Sắp xếp đơn mới lên đầu
                                .Take(4) // Chỉ hiện 4 đơn
                                .ToList();
                        }

                        @foreach (var order in recentOrders)
                        {
                            <tr class="order-row @(order.Status == "Chưa giao hàng" ? "pending-row" : "shipping-row")">
                                <td class="order-id">#@order.ID</td>
                                <td>
                                    <div class="customer-info">
                                        <span class="customer-name">@(order.KhachHang?.HoTen ?? "Không có")</span>
                                        @if (!string.IsNullOrEmpty(order.KhachHang?.Sdt))
                                        {
                                            <span class="customer-phone">@order.KhachHang.Sdt</span>
                                        }
                                    </div>
                                </td>
                                <td>@(order.NgayDat.HasValue ? order.NgayDat.Value.ToString("dd/MM/yyyy") : "N/A")</td>
                                <td class="order-total">@String.Format("{0:#,0}", order.ThanhTien) ₫</td>
                                <td>
                                    <span class="status @(order.Status == "Chưa giao hàng" ? "pending" : "processing")">
                                        <i class="fas @(order.Status == "Chưa giao hàng" ? "fa-clock" : "fa-truck")"></i>
                                        @order.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="@Url.Action("Detail", "Order", new { id = order.ID })" class="btn-view" title="Xem chi tiết">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button class="btn-update-status" data-id="@order.ID" data-status="@order.Status" title="Cập nhật trạng thái">
                                            <i class="fas fa-arrow-right"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }

                        @if (recentOrders.Count == 0)
                        {
                            <tr>
                                <td colspan="6" class="text-center py-4">
                                    <i class="fas fa-clipboard-check fa-2x text-muted mb-2"></i>
                                    <p>Không có đơn hàng nào cần xử lý</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (dsOrder.Count(o => o.Status == "Chưa giao hàng" || o.Status == "Đang giao hàng") > 4)
            {
                <div class="orders-footer">
                    <a href="@Url.Action("Index", "Order")" class="view-all-link">
                        Xem tất cả đơn hàng <i class="fas fa-arrow-right"></i>
                    </a>
                </div>
            }
        </div>
    </div>

    <script>
        // Chuẩn bị dữ liệu cho biểu đồ từ Razor
        const monthlyData = @Html.Raw(Json.Encode(monthlyData));

        // Utility function for gradient backgrounds
        function createGradient(ctx, color1, color2) {
            const gradient = ctx.createLinearGradient(0, 0, 0, 300);
            gradient.addColorStop(0, color1);
            gradient.addColorStop(1, color2);
            return gradient;
        }

        // Biểu đồ doanh số
        const salesCtx = document.getElementById('chartProduct');
        const salesChart = new Chart(salesCtx, {
            type: 'bar',
            data: {
                labels: monthlyData.map(d => 'T' + d.Month),
                datasets: [{
                    label: 'Doanh số (VNĐ)',
                    data: monthlyData.map(d => d.TotalAmount),
                    backgroundColor: '#0b9663',
                    borderRadius: 8,
                    borderWidth: 0,
                    barThickness: 24,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString('vi-VN') + ' ₫';
                            }
                        }
                    }
                }
            }
        });

        // Dữ liệu mẫu cho xu hướng (có thể thay thế bằng dữ liệu thực)
        const mockTrendData = {
            labels: monthlyData.map(d => 'T' + d.Month),
            datasets: {
                revenue: monthlyData.map(d => d.TotalAmount),
                orders: monthlyData.map(d => d.OrderCount),
                products: monthlyData.map(d => d.Month * 5) // Giả lập dữ liệu sản phẩm
            }
        };

        // Biểu đồ xu hướng
        const trendCtx = document.getElementById('trendChart');
        const trendChart = new Chart(trendCtx, {
            type: 'line',
            data: {
                labels: mockTrendData.labels,
                datasets: [{
                    label: 'Doanh thu',
                    data: mockTrendData.datasets.revenue,
                    borderColor: '#4bc0c0',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString('vi-VN') + ' ₫';
                            }
                        }
                    }
                }
            }
        });

        // Hàm lấy dữ liệu thống kê bán hàng theo khoảng thời gian
        function loadSalesStatistics(period) {
            $.ajax({
                url: '@Url.Action("GetSalesStatistics", "Home")',
                type: 'GET',
                data: { period: period },
                success: function(data) {
                    console.log("Dữ liệu thống kê nhận được:", data);

                    // Nếu không nhận được dữ liệu hoặc dữ liệu rỗng, sử dụng dữ liệu mặc định
                    if (!data || Object.keys(data).length === 0) {
                        console.warn("Không nhận được dữ liệu, sử dụng dữ liệu mặc định");
                        return;
                    }

                    const labels = Object.keys(data);
                    const values = Object.values(data);

                    salesChart.data.labels = labels;
                    salesChart.data.datasets[0].data = values;
                    salesChart.update();
                },
                error: function(error) {
                    console.error("Lỗi khi lấy dữ liệu thống kê:", error);
                }
            });
        }

        // Xử lý sự kiện thay đổi metric xu hướng
        document.getElementById('trendMetric').addEventListener('change', function(e) {
            const metric = e.target.value;
            let label = 'Doanh thu';
            let data = mockTrendData.datasets.revenue;
            let valueFormatter = (value) => value.toLocaleString('vi-VN') + ' ₫';

            if (metric === 'orders') {
                label = 'Số đơn hàng';
                data = mockTrendData.datasets.orders;
                valueFormatter = (value) => value;
            } else if (metric === 'products') {
                label = 'Số sản phẩm';
                data = mockTrendData.datasets.products;
                valueFormatter = (value) => value;
            }

            trendChart.data.datasets[0].label = label;
            trendChart.data.datasets[0].data = data;

            // Cập nhật định dạng hiển thị cho trục y
            trendChart.options.scales.y.ticks.callback = function(value) {
                return valueFormatter(value);
            };

            trendChart.update();
        });

        // Xử lý sự kiện thay đổi khoảng thời gian
        document.getElementById('chartPeriod').addEventListener('change', function(e) {
            loadSalesStatistics(e.target.value);
        });

        // Xử lý sự kiện cập nhật trạng thái đơn hàng
        $(document).on('click', '.btn-update-status', function() {
            const orderId = $(this).data('id');
            const currentStatus = $(this).data('status');

            // Hiển thị dialog cập nhật trạng thái
            const newStatus = currentStatus === 'Chưa giao hàng' ? 'Đang giao hàng' : 'Đã giao hàng';

            if (confirm(`Cập nhật đơn hàng #${orderId} từ "${currentStatus}" thành "${newStatus}"?`)) {
                $.ajax({
                    url: '@Url.Action("UpdateOrderStatus", "Home")',
                    type: 'POST',
                    data: {
                        orderId: orderId,
                        status: newStatus
                    },
                    success: function(response) {
                        if (response.success) {
                            alert('Cập nhật trạng thái thành công!');

                            // Tải lại dữ liệu thống kê sau khi cập nhật trạng thái
                            const currentPeriod = $('#chartPeriod').val();
                            loadSalesStatistics(currentPeriod);

                            // Reload trang sau một khoảng thời gian ngắn để cập nhật UI
                            setTimeout(function() {
                                location.reload();
                            }, 500);
                        } else {
                            alert('Cập nhật trạng thái thất bại: ' + response.message);
                        }
                    },
                    error: function(error) {
                        alert('Lỗi khi cập nhật trạng thái đơn hàng');
                        console.error(error);
                    }
                });
            }
        });

        // Khởi tạo dữ liệu khi trang được load
        $(document).ready(function() {
            console.log("Trang đã tải xong, bắt đầu tải dữ liệu thống kê");

            // Kiểm tra nếu hàm AJAX có hoạt động thì gọi
            if (typeof loadSalesStatistics === 'function') {
                loadSalesStatistics('month');
            }
        });

        // Thêm resize handler cho responsiveness
        window.addEventListener('resize', function() {
            if (salesChart && salesChart.update) salesChart.update();
            if (trendChart && trendChart.update) trendChart.update();
        });

        // Xử lý bộ lọc đơn hàng
        $('#orderFilter').on('change', function () {
            const filter = $(this).val();

            if (filter === 'all') {
                $('.pending-row, .shipping-row').show();
            } else if (filter === 'pending') {
                $('.pending-row').show();
                $('.shipping-row').hide();
            } else if (filter === 'shipping') {
                $('.pending-row').hide();
                $('.shipping-row').show();
            }
        });
        // Xử lý lọc sản phẩm bán chạy
$('#timeRangeFilter').on('change', function() {
    const selectedRange = $(this).val();
    console.log(`Đang lọc sản phẩm bán chạy theo khoảng thời gian: ${selectedRange}`);

    $.ajax({
        url: '@Url.Action("GetTopProducts", "Home")',
        type: 'GET',
        data: { timeRange: selectedRange },
        success: function(response) {
            // Cập nhật bảng với dữ liệu mới
        }
    });
});

// Xử lý lọc đánh giá
$('#reviewsFilter').on('change', function() {
    const filter = $(this).val();
    console.log(`Đang lọc đánh giá theo: ${filter}`);

    // Thêm logic lọc đánh giá (trong thực tế, bạn sẽ gửi AJAX request)
});

// Xử lý nút phản hồi đánh giá
$(document).on('click', '.btn-reply', function() {
    const reviewId = $(this).data('review-id');
    const reviewContent = $(this).closest('.review-item').find('.review-content').text();

    // Hiển thị form phản hồi hoặc mở modal
    alert(`Đang phản hồi đánh giá #${reviewId}: "${reviewContent.trim()}"`);

    // Trong thực tế, bạn sẽ mở một modal hoặc hiển thị form phản hồi
});

// Xử lý nút đánh dấu đã đọc
$(document).on('click', '.btn-mark-read', function() {
    const reviewId = $(this).data('review-id');
    const button = $(this);

    // Đổi icon và disable nút
    button.html('<i class="fas fa-check-double"></i>');
    button.prop('disabled', true);

    // Trong thực tế, bạn sẽ gửi AJAX request để cập nhật trạng thái đánh giá
    /*
    $.ajax({
        url: '@Url.Action("MarkReviewAsRead", "Home")',
        type: 'POST',
        data: {
            reviewId: reviewId,
            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
        },
        success: function(response) {
            if (response.success) {
                button.html('<i class="fas fa-check-double"></i>');
                button.prop('disabled', true);
            }
        }
    });
    */
});
    </script>
</body>
</html>

<style>
    :root {
        --primary-color: #27ae60;
        --primary-dark: #219a52;
        --primary-light: #2ecc71;
        --accent-blue: #3498db;
        --accent-red: #e74c3c;
        --accent-yellow: #f1c40f;
        --accent-purple: #9b59b6;
        --text-dark: #2c3e50;
        --text-light: #ffffff;
        --background: #f5f5f5;
        --card-bg: #ffffff;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
        padding: 20px;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .stat-card .inner {
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

    .stat-info h3 {
        font-size: 24px;
        margin-bottom: 5px;
        color: #333;
    }

    .stat-info p {
        margin: 0;
        color: #666;
    }

    .icon {
        font-size: 40px;
        opacity: 0.3;
    }

    .stat-footer {
        background: rgba(0, 0, 0, 0.1);
        padding: 10px;
    }

        .stat-footer a {
            color: rgba(0, 0, 0, 0.8);
            text-decoration: none;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

    .revenue {
        border-left: 4px solid #00a65a;
    }

    .orders {
        border-left: 4px solid #00c0ef;
    }

    .products {
        border-left: 4px solid #f39c12;
    }

    .low-stock {
        border-left: 4px solid #dd4b39;
    }

    .charts-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .chart-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .orders-footer {
        padding: 15px 20px;
        text-align: center;
        border-top: 1px solid #eee;
    }

    .view-all-link {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 5px;
        transition: all 0.2s;
    }

        .view-all-link:hover {
            color: #2980b9;
        }
    .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .chart-title {
        font-size: 18px;
        font-weight: bold;
    }

    .chart-options select {
        padding: 8px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .chart-container {
        height: 300px;
        position: relative;
    }

    @@media (max-width: 768px) {
        .stats-container {
            grid-template-columns: 1fr;
        }

        .charts-container {
            grid-template-columns: 1fr;
        }
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
    }

    body {
        background: var(--background);
    }

    .dashboard-container {
        padding: 20px;
        max-width: 1400px;
        margin: 0 auto;
    }



    .dashboard-header {
        background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
        padding: 2rem;
        border-radius: 1rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 25px -5px rgba(34, 197, 94, 0.25);
        color: white;
        position: relative;
        overflow: hidden;
    }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 60%);
            animation: rotate 20s linear infinite;
        }

    @@keyframes rotate {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
    /* Top Selling Products Styles */
.top-products-container {
    margin-top: 30px;
    margin-bottom: 30px;
    padding: 0 20px;
}

.top-products-card {
    background-color: var(--card-bg);
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
}

.top-products-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid #eee;
}

.top-products-title {
    display: flex;
    align-items: center;
    gap: 10px;
}

.top-products-title i {
    font-size: 20px;
    color: #f39c12;
}

.top-products-title h3 {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
}

.top-products-filter select {
    padding: 8px 12px;
    border-radius: 5px;
    border: 1px solid #ddd;
    background-color: #f8f8f8;
    cursor: pointer;
}

.top-products-table {
    width: 100%;
}

.top-products-table th {
    font-weight: 600;
    padding: 15px;
    color: #555;
    background-color: #f8f9fa;
}

.top-products-table td {
    padding: 15px;
    vertical-align: middle;
}

.rank-badge {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
}

.rank-1 {
    background: linear-gradient(135deg, #FFD700, #FFA500);
    box-shadow: 0 2px 5px rgba(255, 165, 0, 0.3);
}

.rank-2 {
    background: linear-gradient(135deg, #C0C0C0, #A9A9A9);
    box-shadow: 0 2px 5px rgba(169, 169, 169, 0.3);
}

.rank-3 {
    background: linear-gradient(135deg, #CD7F32, #8B4513);
    box-shadow: 0 2px 5px rgba(139, 69, 19, 0.3);
}

.rank-4, .rank-5 {
    background: #6c757d;
}

.product-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.product-thumbnail {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: 5px;
}

.product-name {
    font-weight: 500;
    margin-bottom: 3px;
}

.product-price {
    font-size: 12px;
    color: #666;
}

.category-tag {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 20px;
    background-color: #e8f4f8;
    color: #3498db;
    font-size: 12px;
}

.sold-count {
    font-weight: 600;
    color: #27ae60;
}

.stock-count {
    font-weight: 600;
    color: #3498db;
}

.low-stock-count {
    color: #e74c3c;
}

.revenue-amount {
    font-weight: 600;
    color: #16a34a;
}

.total-revenue {
    font-weight: 700;
    color: #16a34a;
    font-size: 16px;
}

/* Reviews Styles */
.reviews-container {
    margin-top: 30px;
    margin-bottom: 30px;
    padding: 0 20px;
}

.reviews-card {
    background-color: var(--card-bg);
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
}

.reviews-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid #eee;
}

.reviews-title {
    display: flex;
    align-items: center;
    gap: 10px;
}

.reviews-title i {
    font-size: 20px;
    color: #9b59b6;
}

.reviews-title h3 {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
}

.reviews-filter select {
    padding: 8px 12px;
    border-radius: 5px;
    border: 1px solid #ddd;
    background-color: #f8f8f8;
    cursor: pointer;
}

.reviews-list {
    padding: 0;
}

.review-item {
    padding: 20px;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s;
}

.review-item:hover {
    background-color: #f9f9f9;
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 10px;
}

.reviewer-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.reviewer-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #3498db;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.reviewer-details {
    display: flex;
    flex-direction: column;
}

.reviewer-name {
    font-weight: 600;
}

.review-date {
    font-size: 12px;
    color: #666;
}

.review-rating {
    color: #f39c12;
}

.high-rating {
    color: #27ae60;
}

.medium-rating {
    color: #f39c12;
}

.low-rating {
    color: #e74c3c;
}

.review-product {
    margin-bottom: 10px;
    font-size: 14px;
}

.product-badge {
    display: inline-block;
    background-color: #e8f4f8;
    padding: 3px 8px;
    border-radius: 10px;
    color: #3498db;
    font-size: 12px;
    margin-right: 5px;
}

.review-content {
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 5px;
    margin-bottom: 10px;
    font-size: 14px;
    line-height: 1.5;
}

.review-actions {
    display: flex;
    gap: 10px;
}

.btn-reply, .btn-mark-read {
    padding: 6px 12px;
    border-radius: 5px;
    border: none;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s;
}

.btn-reply {
    background-color: #f8f9fa;
    color: #333;
}

.btn-reply:hover {
    background-color: #e9ecef;
}

.btn-mark-read {
    background-color: #27ae60;
    color: white;
}

.btn-mark-read:hover {
    background-color: #219a52;
}

.no-reviews {
    padding: 40px;
    text-align: center;
    color: #6c757d;
}

.no-reviews i {
    font-size: 40px;
    margin-bottom: 10px;
}

.reviews-footer {
    padding: 15px 20px;
    text-align: center;
    border-top: 1px solid #eee;
}

.view-all-link {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    transition: all 0.2s;
}

.view-all-link:hover {
    color: #2980b9;
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .top-products-container,
    .reviews-container {
        padding: 0 10px;
    }

    .top-products-header,
    .reviews-header {
        flex-direction: column;
        gap: 10px;
        align-items: flex-start;
    }

    .product-info {
        flex-direction: column;
        align-items: flex-start;
    }

    .reviewer-info {
        flex-direction: column;
        align-items: flex-start;
    }

    .review-header {
        flex-direction: column;
        gap: 10px;
    }
}
    .header-content {
        display: flex;
        flex-direction: column;
        gap: 10px;
        position: relative;
        z-index: 1;
    }

    .title-section {
        display: flex;
        align-items: center;
        gap: 12px;
    }

        .title-section i {
            font-size: 24px;
        }

        .title-section h2 {
            font-size: 24px;
            font-weight: 600;
        }

    .info-section {
        display: flex;
        gap: 20px;
    }

    .date-info {
        font-size: 16px;
        opacity: 0.9;
    }


    /* Enhanced Stat Boxes */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-box {
        background: var(--card-bg);
        border-radius: 10px;
        padding: 20px;
        display: flex;
        align-items: center;
        gap: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .stat-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
    }

    .pulse {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(26, 35, 126, 0.4);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(26, 35, 126, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(26, 35, 126, 0);
        }
    }

    .customer {
        background: linear-gradient(135deg, #ffffff 0%, #e8f4f8 100%);
        border-left: 4px solid var(--accent-blue);
    }

        .customer .stat-icon {
            background: linear-gradient(135deg, #3498db, #2980b9);
        }

    .product {
        background: linear-gradient(135deg, #ffffff 0%, #e8f8f5 100%);
        border-left: 4px solid var(--primary-color);
    }

        .product .stat-icon {
            background: linear-gradient(135deg, #27ae60, #219a52);
        }

    .order {
        background: linear-gradient(135deg, #ffffff 0%, #f8f4e8 100%);
        border-left: 4px solid var(--accent-yellow);
    }

        .order .stat-icon {
            background: linear-gradient(135deg, #f1c40f, #f39c12);
        }

    .warning {
        background: linear-gradient(135deg, #ffffff 0%, #f8e8e8 100%);
        border-left: 4px solid var(--accent-red);
    }

        .warning .stat-icon {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

    .stat-content h3 {
        color: var(--text-dark);
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 8px;
    }

    .stat-value {
        color: var(--text-dark);
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 4px;
    }

    .stat-desc {
        color: #666;
        font-size: 12px;
    }

    .table-responsive {
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid var(--border-color);
    }

    th {
        background: #f8f9fa;
        color: var(--text-primary);
        font-weight: 600;
    }

    .status {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
    }

        .status.pending {
            background: #fff3e0;
            color: #e65100;
        }

        .status.processing {
            background: #e8f5e9;
            color: #2e7d32;
        }

    @@media (max-width: 1024px) {
        .content-grid {
            grid-template-columns: 1fr;
        }
    }

    /* Enhanced Orders Table Styles */
    .orders-container {
        margin-top: 30px;
        margin-bottom: 30px;
        padding: 0 20px;
    }

    .orders-card {
        background-color: var(--card-bg);
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .orders-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .orders-title {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .orders-title i {
            font-size: 20px;
            color: var(--primary-color);
        }

        .orders-title h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

    .orders-filter select {
        padding: 8px 12px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #f8f8f8;
        cursor: pointer;
    }

    .orders-table {
        width: 100%;
    }

        .orders-table th {
            font-weight: 600;
            padding: 15px;
            color: #555;
            background-color: #f8f9fa;
        }

        .orders-table td {
            padding: 15px;
            vertical-align: middle;
        }

    .order-row {
        transition: background-color 0.2s;
    }

        .order-row:hover {
            background-color: #f5f5f5;
        }

    .pending-row {
        border-left: 3px solid #f39c12;
    }

    .shipping-row {
        border-left: 3px solid #27ae60;
    }

    .order-id {
        font-weight: 600;
        color: #333;
    }

    .customer-info {
        display: flex;
        flex-direction: column;
    }

    .customer-name {
        font-weight: 500;
    }

    .customer-phone {
        font-size: 12px;
        color: #666;
    }

    .order-total {
        font-weight: 600;
        color: #16a34a;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

        .action-buttons a,
        .action-buttons button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            color: white;
            transition: all 0.2s;
        }

    .btn-view {
        background-color: #3498db;
    }

        .btn-view:hover {
            background-color: #2980b9;
        }

    .btn-update-status {
        background-color: #27ae60;
    }

        .btn-update-status:hover {
            background-color: #219a52;
        }
</style>