@model QuanLyCuaHangTapHoa.Models.Product

@{
    ViewBag.Title = "Sửa sản phẩm";
    Layout = "~/Views/Shared/_layoutadmin.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <title>Chỉnh Sửa Thông Tin Sản Phẩm</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)

            <div class="dashboard-header">
                <h1 class="page-title">
                    <i class="fas fa-box-open"></i>
                    Chỉnh Sửa Thông Tin Sản Phẩm
                </h1>
                <div class="employee-info">
                    Mã sản phẩm: @Model.Id
                </div>
            </div>

            <div class="form-card">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-grid">
                    <div class="form-group">
                        <label class="control-label">Mã sản phẩm</label>
                        @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Tên sản phẩm</label>
                        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Số lượng nhập</label>
                        @Html.EditorFor(model => model.SoLuong, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SoLuong, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Đã bán</label>
                        @Html.EditorFor(model => model.ProductSold, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Danh mục</label>
                        @Html.DropDownList("CatalogId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CatalogId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Giảm giá (%)</label>
                        @Html.EditorFor(model => model.ProductSale, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProductSale, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Giá vốn</label>
                        @Html.EditorFor(model => model.PriceOld, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PriceOld, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label class="control-label">Giá bán</label>
                        <input class="form-control" value="@string.Format("{0:#,0}", Model.UnitPrice) đ" disabled />
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MoTa, "Mô Tả Sản Phẩm", new { @class = "control-label" })
                    @Html.TextAreaFor(model => model.MoTa, new
                    {
                        @class = "form-control editor",
                        id = "mota"
                    })
                    @Html.ValidationMessageFor(model => model.MoTa, "", new { @class = "text-danger" })
                </div>
                <div class="upload-section">
                    <label class="control-label">Ảnh sản phẩm</label>
                    <div class="upload-container">
                        <div class="upload-preview">
                            <img id="thumbimage" class="preview-image" src="@Url.Content("~/Resources/Pictures/Products/" + Model.Picture)"
                                 style="display: @(string.IsNullOrEmpty(Model.Picture) ? "none" : "block");" />
                        </div>
                        <div class="upload-controls">
                            <input type="file" name="ProductThumbnailStream" id="file" class="file-input" />
                            <label for="file" class="upload-button">
                                <i class="fas fa-cloud-upload-alt"></i>
                                Chọn ảnh
                            </label>
                            @Html.ValidationMessageFor(model => model.ProductThumbnailStream, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="button-group">
                    <button type="submit" class="btn btn-save">
                        <i class="fas fa-save"></i>
                        Lưu Thay Đổi
                    </button>
                    <a href="@Url.Action("Indexadminsp","Product")" class="btn btn-cancel">
                        <i class="fas fa-arrow-left"></i>
                        Quay Lại
                    </a>
                </div>
            </div>
        }
    </div>
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script src="https://cdn.ckeditor.com/4.16.2/standard/ckeditor.js"></script>
        <script>
            // Đảm bảo DOM đã load xong
            document.addEventListener('DOMContentLoaded', function () {
                if (CKEDITOR) {
                    CKEDITOR.replace('mota', {
                        height: 300,
                        language: 'vi',
                        removeButtons: 'About,Source',
                        toolbar: [
                            { name: 'clipboard', items: ['Cut', 'Copy', 'Paste', 'PasteText', '-', 'Undo', 'Redo'] },
                            { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike'] },
                            { name: 'paragraph', items: ['NumberedList', 'BulletedList', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'] },
                            { name: 'links', items: ['Link', 'Unlink'] },
                            { name: 'insert', items: ['Image', 'Table'] },
                            { name: 'styles', items: ['Styles', 'Format'] }
                        ]
                    });
                }
            });
        </script>
    }
    <script>
        document.getElementById('file').onchange = function (event) {
            var reader = new FileReader();
            reader.onload = function () {
                var output = document.getElementById('thumbimage');
                output.src = reader.result;
                output.style.display = 'block';
            };
            reader.readAsDataURL(event.target.files[0]);
        };
    </script>

    <style>
        .cke_chrome {
            border: 1px solid #e2e8f0 !important;
            border-radius: 0.5rem !important;
            overflow: hidden;
        }

        .cke_top {
            background: #f8fafc !important;
            border-bottom: 1px solid #e2e8f0 !important;
        }

        .cke_bottom {
            background: #f8fafc !important;
            border-top: 1px solid #e2e8f0 !important;
        }

        .cke_editable {
            padding: 15px !important;
        }

        /* Focus state để phù hợp với design */
        .cke_focus {
            outline: none !important;
            border-color: #22c55e !important;
            box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1) !important;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f6fff8 0%, #f1fff5 100%);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .dashboard-header {
            background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
            padding: 2rem;
            border-radius: 1rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 25px -5px rgba(34, 197, 94, 0.25);
            color: white;
            position: relative;
            overflow: hidden;
        }

            .dashboard-header::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 60%);
                animation: rotate 20s linear infinite;
            }

        @@keyframes rotate {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
            position: relative;
            z-index: 1;
        }

        .employee-info {
            font-size: 1.2rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .form-card {
            background: white;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .form-group {
            margin-bottom: 0.5rem;
        }

        .control-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #1e293b;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

            .form-control:focus {
                border-color: #22c55e;
                box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);
                outline: none;
            }

            .form-control[readonly], .form-control[disabled] {
                background-color: #f8fafc;
                cursor: not-allowed;
            }

        .text-danger {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .upload-section {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e2e8f0;
        }

        .upload-container {
            display: flex;
            gap: 2rem;
            margin-top: 1rem;
        }

        .upload-preview {
            width: 200px;
            height: 200px;
            border: 2px dashed #e2e8f0;
            border-radius: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .preview-image {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
        }

        .upload-controls {
            flex: 1;
        }

        .file-input {
            display: none;
        }

        .upload-button {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .upload-button:hover {
                background: #f1f5f9;
                border-color: #22c55e;
            }

        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e2e8f0;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-save {
            background: #22c55e;
            color: white;
        }

            .btn-save:hover {
                background: #16a34a;
                transform: translateY(-2px);
            }

        .btn-cancel {
            background: #f1f5f9;
            color: #64748b;
            text-decoration: none;
        }

            .btn-cancel:hover {
                background: #e2e8f0;
                transform: translateY(-2px);
            }

        @@media (max-width: 768px) {
            .upload-container {
                flex-direction: column;
            }

            .upload-preview {
                width: 100%;
                height: 300px;
            }
        }
    </style>
</body>
</html>